%%%
% Author: Jane Yang
% Last Modifier: 4/6/2024
% This function returns a CSV file containing the frequency of each word
% appeared in the subjects.
% 
% Input: subID or expID, output_filename
% Output: a cell array containing word count table of each subject, a
%         string array containing the common words of subjects, and a table
%         of summary word count of all subjects. A .CSV file will be
%         generated based on summary word count table.
%%%

function rtr = get_word_count_matrix(subexpID,output_filename)
    % TODO: check whether subexpID & output_filename were given

    % initialize an empty cell array to hold individual subject's word
    % count table
    individuals = {};


    subIDs = cIDs(subexpID);

    % iterate thru subjects
    for i = 1:size(subIDs,1)
        sub = subIDs(i);
        subInfo = sid2kid(sub);
        kidID = subInfo(2);

        % get path to subject's speech transcription
        transFile = fullfile(get_subject_dir(sub),'speech_transcription_p',sprintf('speech_%d.txt',kidID));
        
        % check if subject has a speech transcription file
        if isfile(transFile)
            % parse transcription file
            trans = readtable(transFile);
            words = string(strjoin(trans{:,end})); % join all utterances into a string array
            words = strsplit(words," "); % split into string arrays by space

            % lemmatize words in utterances
            updatedWords = normalizeWords(words,'Style','lemma','Language','en');

            % get subject-level word count
            subWordCount = wordCloudCounts(updatedWords);
            individuals{i} = sortrows(subWordCount,1); % sorted alphabetically
        else
            % speech transcription file doesn't exist
            sprintf("Subject %s does not have a speech transcription file.\n",sub);
            individuals{i} = table(); % use an empty table to indicate empty speech transcription file
        end
    end

    
    if size(subIDs,1)>1 % if the subject list has more than one subject
        % % iterate thru individual subject's word count table, find common
        % % words, and construct a bigger matrix for all subjects
        % 
        % find common words across subjects
        common = intersect(individuals{1}{:,1},individuals{2}{:,1});
        all = vertcat(individuals{1}{:,1},individuals{2}{:,1});
        for k = 3:size(individuals,2)
            currTable = individuals{k};
            % check for empty individual subject's word count table
            if ~isempty(currTable)
                common = intersect(common,currTable{:,1});
                if isempty(common)
                    break;
                end
                all = [all;currTable{:,1}];
            end
        end
        % get all unique words across subjects
        all = unique(all);
    
        % find a list of non-common words across subjects
        nonCommon = setdiff(all,common);
    
        % initialize a NxM matrix, where N is the number of unique words across
        % subjects and M is the number of input subjects
        wordCountMtr = zeros(size(all,1),size(subIDs,1));
        disp(size(wordCountMtr));
    
        
        % iterate thru each subject
        % construct return matrix for word counts across subjects
        % Follow by this order: common words --> non-common words
        for i = 1:size(subIDs,1)
            subTable = individuals{i};
            % find count for common words
            subCommon = subTable{ismember(subTable{:,1},common),2};

            subNonCommon = zeros(nonCommon);
    
            % find count for noncommon words
            % subNonCommon = subTable{ismember(subTable{:,1},nonCommon),2};
            subNonCommonWords = nonCommon(ismember(nonCommon,subTable{:,1}));
            subNonCommonIdx = find(ismember(nonCommon,subTable{:,1}));
            subNonCommonCount = subTable{ismember(subTable{:,1},nonCommon),2};
            subNonCommon(subNonCommonIdx) = subNonCommonCount;
            subNonCommon(set)
    
            % construct subject-level word count matrix
            subWordCountMtr = vertcat(subCommon,subNonCommon);
    
            % save to overall (across all subjects) word count matrix
            wordCountMtr(:,i) = subWordCountMtr;
        end
    
        % TODO: put together an overall return table
        % set table row to subID
        wordTable = vertcat(common,unCommon);
        wordCountTable = table(wordCountMtr);
        wordCountTable.Properties.VariableNames = string(subIDs');
        rtr = join(wordTable,wordCountTable);
    else % only has one subject
        rtr = individuals{1};
        rtr = renamevars(rtr,["Word" "Count"],["Word" num2str(subIDs(1))]);
    end

    % write to csv
    writetable(rtr,output_filename);


    

    % flattened_list = [];
    % common = [];
    % 
    % 
    % %% generate a list of subjects that have a speech transcription file
    % for i = 1:numel(subexpID)
    %     if size(cIDs(subexpID(i)),1) == 1
    %         [all_words,utterances] = parse_speech_trans(cIDs(subexpID(i)));
    %         if size(all_words,1) ~= 0
    %             flattened_list(end+1,1) = cIDs(subexpID(i));
    %         end
    %     elseif size(cIDs(subexpID(i)),1) > 1
    %         list = cIDs(subexpID(i));
    %         for j = 1:size(list,1)
    %             [all_words,utterances] = parse_speech_trans(list(j));
    %             if size(all_words,1) ~= 0
    %                 flattened_list(end+1,1) = list(j);
    %             end
    %         end
    %     end
    % end
    % 
    % %% obtain a cell array containing parsed transcription from subject
    % for j = 1:size(flattened_list,1)
    %     % parse speech_transcription .txt file, if exist
    %     [all_words,utterances] = parse_speech_trans(flattened_list(j));
    % 
    %     % get word frequency
    %     wordCount_table = wordCloudCounts(all_words);
    %     wordCount_mtr = table2array(wordCount_table);
    % 
    %     % sort each word count matrix for easier comparison later
    %     wordCount_mtr = sortrows(wordCount_mtr);
    % 
    %     % append to cell array
    %     individuals{j} = wordCount_mtr;
    % end
    % 
    % 
    % %% generate a return word count matrix
    % if (size(individuals,2)==1)
    %     summary_count{1} = individuals{1,1};
    %     disp(summary_count{1});
    % elseif (size(individuals,2)>1)
    %     % find common words
    %     common = intersect(individuals{1,1}(:,1),individuals{1,2}(:,1));
    %     all = [];
    %     for k = 3:size(individuals,2)
    %         common = intersect(common,individuals{1,k}(:,1));
    %         if isempty(common)
    %             break;
    %         end
    %         all = [all;individuals{1,k}(:,1)];
    %     end
    % 
    %     % find a list of all words appeared in all transcriptions
    %     all = [individuals{1,1}(:,1);individuals{1,2}(:,1);all];
    % 
    %     % find a list of words except common words
    %     diff = setdiff(all,common);
    % 
    %     % set a word template for individuals word count matrix
    %     template = [common;diff];
    % 
    %     % construct new word count matrix
    %     for a = 1:size(individuals,2)
    %         % initialize frequency
    %         count = zeros(size(template));
    % 
    %         % fill in common words' count
    %         common_idx = ismember(individuals{1,a}(:,1),common);
    %         count(1:size(common,1)) = str2double(individuals{1,a}(common_idx,2));
    % 
    %         % fill in the rest word counts
    %         diff_og_idx = ismember(individuals{1,a}(:,1),diff);
    %         diff_template_idx = ismember(template,setdiff(individuals{1,a}(:,1),common));
    % 
    %         count(diff_template_idx) = str2double(individuals{1,a}(diff_og_idx,2));
    % 
    % 
    %         % save to summary matrix
    %         summary_count(:,a) = count;
    %     end
    % 
    %     summary_count = [template summary_count];
    % end
    % 
    % %% write return matrix to a CSV file
    % colNames = {'word'};
    % for sub = 1:size(flattened_list,1)
    %     colNames{end+1} = num2str(flattened_list(sub));
    % end
    % 
    % summary_count = array2table(summary_count,'VariableNames',colNames);
    % 
    % % don't write to a CSV file if the function is used as an intermediate
    % % helper function
    % if ~strcmp(output_filename,'')
    %     writetable(summary_count,output_filename);
    % end
end